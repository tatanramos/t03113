[{"/Users/sebastianramos/Desktop/t03113/src/index.jsx":"1","/Users/sebastianramos/Desktop/t03113/src/reportWebVitals.js":"2","/Users/sebastianramos/Desktop/t03113/src/App.jsx":"3","/Users/sebastianramos/Desktop/t03113/src/views/Flights.jsx":"4","/Users/sebastianramos/Desktop/t03113/src/config/index.js":"5"},{"size":543,"mtime":1661733642549,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1661302163040,"results":"8","hashOfConfig":"7"},{"size":301,"mtime":1662256434272,"results":"9","hashOfConfig":"7"},{"size":14097,"mtime":1662263967928,"results":"10","hashOfConfig":"7"},{"size":116,"mtime":1661652570923,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ql7awk",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sebastianramos/Desktop/t03113/src/index.jsx",[],[],"/Users/sebastianramos/Desktop/t03113/src/reportWebVitals.js",[],[],"/Users/sebastianramos/Desktop/t03113/src/App.jsx",[],[],"/Users/sebastianramos/Desktop/t03113/src/views/Flights.jsx",["28","29","30","31"],[],"import React, { useState, useEffect } from \"react\";\nimport config from \"../config\";\nimport { MapContainer } from 'react-leaflet/MapContainer'\nimport { Marker } from 'react-leaflet/Marker'\nimport { Popup } from 'react-leaflet/Popup'\nimport { TileLayer } from 'react-leaflet/TileLayer'\nimport { Polyline } from \"react-leaflet\";\nimport 'leaflet/dist/leaflet.css'\nimport L from 'leaflet';\n\nconst URL = `${config.WEBSOCKET_URL}`;\nlet connect_message = '{\"type\": \"join\", \"id\": \"user id\", \"username\": \"Skinny Pete\"}';\nconst originAirportIcon = new L.Icon({\n    iconUrl: require(\"../assets/images/oAirport.png\"),\n    iconSize: [30, 30],\n    iconAnchor: [17, 46], //[left/right, top/bottom]\n    popupAnchor: [0, -46], //[left/right, top/bottom]\n  });\n\n  const destinationAirportIcon = new L.Icon({\n    iconUrl: require(\"../assets/images/dAirport.png\"),\n    iconSize: [30, 30],\n    iconAnchor: [17, 46], //[left/right, top/bottom]\n    popupAnchor: [0, -46], //[left/right, top/bottom]\n  });\n\n  const planeIcon = new L.Icon({\n    iconUrl: require(\"../assets/images/plane2.png\"),\n    iconSize: [30, 30],\n    iconAnchor: [17, 46], //[left/right, top/bottom]\n    popupAnchor: [0, -46], //[left/right, top/bottom]\n  });\n\n  const dotIcon = new L.Icon({\n    iconUrl: require(\"../assets/images/punto.png\"),\n    iconSize: [30, 30],\n    iconAnchor: [17, 46], //[left/right, top/bottom]\n    popupAnchor: [0, -46], //[left/right, top/bottom]\n  });\n\n  const takeoffIcon = new L.Icon({\n    iconUrl: require(\"../assets/images/takeoff.png\"),\n    iconSize: [40, 40],\n    iconAnchor: [17, 46], //[left/right, top/bottom]\n    popupAnchor: [0, -46], //[left/right, top/bottom]\n  });\n\n  const landingIcon = new L.Icon({\n    iconUrl: require(\"../assets/images/landing.png\"),\n    iconSize: [40, 40],\n    iconAnchor: [17, 46], //[left/right, top/bottom]\n    popupAnchor: [0, -46], //[left/right, top/bottom]\n  });\n\nconst Flights = () => {\n    const [ws, setWs] = useState(new WebSocket(URL));\n    // const [message, setMessage] = useState([]);\n    // const [messages, setMessages] = useState([]);\n    const [flights, setFlights] = useState({});\n    const [flights2, setFlights2] = useState([]);\n    const [positions] = useState({});\n    const [takeOff, setTakeOff] = useState({});\n    const [takeOff2, setTakeOff2] = useState([]);\n    const [landing, setLanding] = useState({});\n    const [landing2, setLanding2] = useState([]);\n    const [crashed, setCrashed] = useState({});\n\n    const [messages, setMessages] = useState([]);\n    const [message, setMessage] = useState([]);\n\n    const submitMessage = (msg) => {\n      // const txt = `${usr}: ${msg}`\n      const message = { type: \"chat\", content: msg};\n      ws.send(JSON.stringify(message));\n    }\n    useEffect(() => {\n\t    ws.onopen = () => {\n\t      console.log('WebSocket Connected');\n        ws.send(connect_message);\n\t    }\n        ws.onmessage = function (event) {\n            const message = JSON.parse(event.data);\n            try {\n                if (message.type === \"flights\") {\n              \n                    setFlights(message[\"flights\"]);\n                    setFlights2(Object.keys(message[\"flights\"]));\n                    Object.keys(message[\"flights\"]).forEach((element) => {\n                      if (element in positions) {\n                    \n                      } else {\n                        positions[element] = {element};\n                        positions[element].positions = []; \n                        positions[element].positionsDefined = \"false\"\n                      }\n                    });\n                }\n\n                if (message.type === \"plane\") {\n                  positions[message[\"plane\"].flight_id].ETA = message[\"plane\"].ETA;\n                  positions[message[\"plane\"].flight_id].airline = message[\"plane\"].airline;\n                  positions[message[\"plane\"].flight_id].arrival = message[\"plane\"].arrival;\n                  positions[message[\"plane\"].flight_id].distance = message[\"plane\"].distance;\n                  positions[message[\"plane\"].flight_id].captain = message[\"plane\"].captain;\n                  positions[message[\"plane\"].flight_id].heading = message[\"plane\"].heading;\n                  positions[message[\"plane\"].flight_id].position = message[\"plane\"].position;\n                  positions[message[\"plane\"].flight_id].status = message[\"plane\"].status;\n                  const x = message[\"plane\"].position[\"lat\"];\n                  const y = message[\"plane\"].position[\"long\"];\n                  if (positions[message[\"plane\"].flight_id].positions.length === 0) {\n                    positions[message[\"plane\"].flight_id].positions.push([x, y]);\n                  }\n                  if (positions[message[\"plane\"].flight_id].positions.length > 0) {\n                    var x0 = positions[message[\"plane\"].flight_id].positions[positions[message[\"plane\"].flight_id].positions.length - 1][0];\n                    var y0 = positions[message[\"plane\"].flight_id].positions[positions[message[\"plane\"].flight_id].positions.length - 1][1];\n                    if (x0 !== x) {\n                      if (y0 !== y) {\n                        positions[message[\"plane\"].flight_id].positions.push([x, y]);\n                      }\n                    }\n                    // console.log(flights);\n                    \n                  }\n                  positions[message[\"plane\"].flight_id].positionsDefined = \"true\";\n                }\n\n                if (message.type === \"take-off\") {\n                    // console.log(message);\n                    if (message[\"flight_id\"] in flights) {\n                      setTakeOff(flights[`${message[\"flight_id\"]}`].departure.location);\n                      setTakeOff2(Object.keys(takeOff));\n                      // console.log(takeOff);\n                      // console.log(takeOff2.length);\n                      // console.log(takeOff[\"lat\"]);\n                      \n                    } else {\n                      // console.log(\"no esta\");\n                    }\n                }\n\n                if (message.type === \"landing\") {\n                  if (message[\"flight_id\"] in flights) {\n                    setLanding(flights[`${message[\"flight_id\"]}`].destination.location);\n                    setLanding2(Object.keys(landing));\n                    \n                  } else {\n                    // console.log(\"no esta\");\n                  }\n                }\n\n                if (message.type === \"crashed\") {\n                  // console.log(\"crashed\");\n                \n                }\n\n                if (message.type === \"message\") {\n                    console.log(message);\n                    // console.log(message[\"message\"].content);\n                    messages.push([message[\"message\"].name, message[\"message\"].content, message[\"message\"].date, message[\"message\"].level]);\n                    if (messages.length > 5) {\n                      setMessages([messages[messages.length - 5], messages[messages.length - 4], messages[messages.length - 3],\n                        messages[messages.length - 2], messages[messages.length - 1]]);\n                    }\n                    // console.log(messages);\n                    // mensaje\n                    // fecha y hora\n                    // emisor\n                }\n\n            } catch (err) {\n                // whatever you wish to do with the err\n            }\n            \n            };\n\n\t    return () => {\n\t      ws.onclose = () => {\n\t        console.log('WebSocket Disconnected');\n\t        setWs(new WebSocket(URL));\n\t      }\n\t    }\n  \t}, [ws.onmessage, ws.onopen, ws.onclose]);\n    return (\n      <div className=\"main\">\n          <div className=\"map\">\n            <MapContainer center={[51.505, -0.09]} zoom={1.5} scrollWheelZoom={false}>\n                <TileLayer\n                    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {flights2.length > 0 && \n                  flights2.map( (element, index) => (\n                    <Marker position={[flights[element].departure.location[\"lat\"], flights[element].departure.location[\"long\"]]} key={index} icon={originAirportIcon} >\n                      <Popup>\n                        <p>ID vuelo ORIGEN: {flights[element].id}</p>\n                        <p>Nombre: {flights[element].departure.name}</p>\n                        <p>Pais: {flights[element].departure.city.country[\"name\"]}</p>\n                        <p>ciudad: {flights[element].departure.city.name}</p>\n                      </Popup>\n                    </Marker>\n                  ))\n                }\n              \n                {flights2.length > 0 && \n                  flights2.map( (element, index) => (\n                    <Marker position={[flights[element].destination.location[\"lat\"], flights[element].destination.location[\"long\"]]} key={index} icon={destinationAirportIcon} >\n                      <Popup>\n                        <p>ID vuelo DESTINO: {flights[element].id}</p>\n                        <p>Nombre: {flights[element].destination.name}</p>\n                        <p>Pais: {flights[element].destination.city.country[\"name\"]}</p>\n                        <p>ciudad: {flights[element].destination.city.name}</p>\n                      </Popup>\n                    </Marker>\n                  ))\n                }\n\n                {flights2.length > 0 && \n                  flights2.map( (element, index) => (\n                    <Polyline positions={[[flights[element].departure.location[\"lat\"], flights[element].departure.location[\"long\"]],[flights[element].destination.location[\"lat\"], flights[element].destination.location[\"long\"]]]} weight={5} opacity={0.3} pathOptions={{ color: \"red\" }} ></Polyline>\n                  ))\n                }  \n\n                {flights2.length > 0 &&\n                  flights2.map( (vuelo, index) => {\n                    if (positions[vuelo].positionsDefined === \"true\") {\n                        return <Marker position={[positions[vuelo].positions[positions[vuelo].positions.length - 1][0], positions[vuelo].positions[positions[vuelo].positions.length - 1][1]]} key={index} icon={planeIcon}>\n                        <Popup>\n                          <p>ID vuelo: {vuelo}</p>\n                          <p>Aerolinea: {positions[vuelo].airline[\"name\"]}</p>\n                          <p>capitan: {positions[vuelo].captain}</p>\n                          <p>ETA: {positions[vuelo].ETA}</p>\n                          <p>Estado: {positions[vuelo].status}</p>\n                        </Popup>\n                      </Marker>\n                    } else {\n                      return false\n                    }\n                  })\n                }\n                {/* {flights2.length > 0 &&\n                  flights2.map( (vuelo, index) => {\n                    if (positions[vuelo].positionsDefined === \"true\") {\n                      positions[vuelo].positions.map( (posicion, index2) => {\n                         return <Marker position={[posicion[0], posicion[1]]} key={index2} icon={dotIcon}></Marker>\n                        // console.log(`${vuelo} ${posicion[0]}, ${posicion[1]}`)\n                        // console.log(posicion)\n                      })\n                    } else {\n                      return true\n                    }\n                  })\n                } */}\n\n                {takeOff2.length > 0 &&\n                  <Marker position={[takeOff[\"lat\"], takeOff[\"long\"]]} icon={takeoffIcon}></Marker>\n                }\n\n                {landing2.length > 0 &&\n                  <Marker position={[landing[\"lat\"], landing[\"long\"]]} icon={landingIcon}></Marker>\n                }\n      \n            </MapContainer>\n            <div className=\"tabla\">\n              <div className=\"fila\">\n                  <div className=\"fila-element\">ID vuelo</div>\n                  <div className=\"fila-element\">Origen</div>\n                  <div className=\"fila-element\">Destino</div>\n                </div>\n              {flights2.length > 0 &&\n                flights2.map( (vuelo, index) => {\n                  return <div className=\"fila\">\n                      <div className=\"fila-element\">{vuelo}</div>\n                      <div className=\"fila-element\">{flights[`${vuelo}`].departure.name}</div>\n                      <div className=\"fila-element\">{flights[`${vuelo}`].destination.name}</div>\n                    </div>\n                })\n              }\n            </div>\n          </div>\n          <div className=\"chat\">\n            <div>\n              {messages.length > 0 &&\n                messages.map( (element, index) => {\n                  if (element[3] === \"warn\") {\n                    return <p className=\"warning\">{element[0]}: {element[1]} ({element[2]})</p>\n                  } else {\n                    return <p className=\"mensajes\">{element[0]}: {element[1]} ({element[2]})</p>\n                  }\n                  \n                })\n              }\n            </div>\n            <div className=\"btn\">\n              <form\n                action=\"\"\n                onSubmit={e => {\n                  e.preventDefault();\n                  submitMessage(message);\n                  setMessage([]);\n                }}\n              >\n                <input\n                  type=\"text\"\n                  className=\"textfield\"\n                  placeholder={'Escribe un mensaje'}\n                  value={message}\n                  onChange={e => setMessage(e.target.value)}\n                />\n                <input type=\"submit\" value={'Enviar'} className=\"send\"/>\n              </form>\n            </div>\n          </div>\n    </div>\n    )\n}\n\nexport default Flights;\n\n/*\n\n- en take off se me esta demorando en agregar a useState\n\n- probar mostrar avion en pos de primer elemento de lista positions\n- ver si se estan superponiendo elementos, esa wea webiaba al poner pings encimas\n- en vola se superpone icon de avion con icon de aeropuerto\n- revisar si se superponen iconos qls\n\n*/","/Users/sebastianramos/Desktop/t03113/src/config/index.js",[],[],{"ruleId":"32","severity":1,"message":"33","line":34,"column":9,"nodeType":"34","messageId":"35","endLine":34,"endColumn":16},{"ruleId":"32","severity":1,"message":"36","line":66,"column":12,"nodeType":"34","messageId":"35","endLine":66,"endColumn":19},{"ruleId":"32","severity":1,"message":"37","line":66,"column":21,"nodeType":"34","messageId":"35","endLine":66,"endColumn":31},{"ruleId":"38","severity":1,"message":"39","line":182,"column":7,"nodeType":"40","endLine":182,"endColumn":44,"suggestions":"41"},"no-unused-vars","'dotIcon' is assigned a value but never used.","Identifier","unusedVar","'crashed' is assigned a value but never used.","'setCrashed' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'flights', 'landing', 'messages', 'positions', 'takeOff', and 'ws'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTakeOff' needs the current value of 'flights'.","ArrayExpression",["42"],{"desc":"43","fix":"44"},"Update the dependencies array to be: [ws.onmessage, ws.onopen, ws.onclose, ws, positions, flights, takeOff, landing, messages]",{"range":"45","text":"46"},[7564,7601],"[ws.onmessage, ws.onopen, ws.onclose, ws, positions, flights, takeOff, landing, messages]"]